http {
    # Other nginx configurations...

    upstream auth_service {
        server 127.0.0.1:8080;
    }

    upstream backend_service {
        server 127.0.0.1:8081;
    }

    server {
        listen 80;
        server_name example.com;

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name example.com;

        ssl_certificate /path/to/ssl/certificate.crt;
        ssl_certificate_key /path/to/ssl/private.key;

        # Auth endpoints
        location /auth/ {
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            proxy_pass http://auth_service/health;
        }

        # Protected application routes
        location / {
            auth_request /auth/validate;
            auth_request_set $auth_token $upstream_http_x_auth_token;

            proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Auth-Token $auth_token;

            # If authentication fails, redirect to login
            error_page 401 = @error401;
        }

        # Handle authentication errors
        location @error401 {
            return 302 /auth/login;
        }
    }
}